{"version":3,"file":"static/js/38.8aa02dd2.chunk.js","mappings":"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","sources":["functions/firebase.js","functions/functions.js","views/subscribe/subscribe.js"],"sourcesContent":["/*import { getAuth, signInWithPopup, GoogleAuthProvider , signInWithEmailAndPassword,createUserWithEmailAndPassword} from 'firebase/auth';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getAnalytics ,logEvent} from \"firebase/analytics\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n\r\n  apiKey: \"AIzaSyA1n1y2n-tshbTus7dE5GDKk2EIo4oBtNg\",\r\n\r\n  authDomain: \"invoicegeneator.firebaseapp.com\",\r\n\r\n  projectId: \"invoicegeneator\",\r\n\r\n  storageBucket: \"invoicegeneator.appspot.com\",\r\n\r\n  messagingSenderId: \"340327402365\",\r\n\r\n  appId: \"1:340327402365:web:6af1f7b629cdca10971a14\",\r\n\r\n  measurementId: \"G-6VK0L3PNQD\"\r\n\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst storage = getStorage(app);\r\nconst analytics = getAnalytics(app);\r\nexport { getAuth, signInWithPopup, GoogleAuthProvider, db , storage, signInWithEmailAndPassword,analytics,logEvent,createUserWithEmailAndPassword};\r\n*/\r\n// Import the necessary modules\r\nimport { signInWithPopup, GoogleAuthProvider , signInWithEmailAndPassword,createUserWithEmailAndPassword} from 'firebase/auth';\r\nimport { getAuth, sendPasswordResetEmail } from 'firebase/auth';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { getAnalytics, logEvent } from 'firebase/analytics';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n\r\n  \r\n  apiKey: \"AIzaSyA1n1y2n-tshbTus7dE5GDKk2EIo4oBtNg\",\r\n  authDomain: \"invoicegeneator.firebaseapp.com\",\r\n  projectId: \"invoicegeneator\",\r\n  storageBucket: \"invoicegeneator.appspot.com\",\r\n  messagingSenderId: \"340327402365\",\r\n  appId: \"1:340327402365:web:6af1f7b629cdca10971a14\",\r\n  measurementId: \"G-6VK0L3PNQD\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst storage = getStorage(app);\r\nconst analytics = getAnalytics(app);\r\nconst auth = getAuth(app); // Add this line to get the auth instance\r\n\r\n// Function to send a password reset email\r\nconst sendPasswordReset = (email) => {\r\n  sendPasswordResetEmail(auth, email)\r\n    .then(() => {\r\n      console.log(\"Password reset email sent successfully!\");\r\n      // Handle success (e.g., display a success message to the user)\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error sending password reset email:\", error);\r\n      // Handle error (e.g., display an error message to the user)\r\n    });\r\n};\r\n\r\nexport {\r\n  getAuth,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  db,\r\n  storage,\r\n  signInWithEmailAndPassword,\r\n  analytics,\r\n  logEvent,\r\n  createUserWithEmailAndPassword,\r\n  sendPasswordReset // Export the function for use in your Forgot Password page\r\n};","import { setDoc, doc, getDoc, addDoc, collection, query, where, getDocs, deleteDoc, } from 'firebase/firestore';\r\nimport { db, getAuth, signInWithPopup, GoogleAuthProvider,createUserWithEmailAndPassword } from './firebase';\r\n\r\nexport async function saveData(collectionName, docId, jsonObject) {\r\n  try {\r\n    return await setDoc(doc(db, collectionName, docId), jsonObject, {\r\n      merge: true,\r\n    });\r\n  } catch (e) {\r\n    console.error('Error adding document: ', e);\r\n  }\r\n}\r\n\r\nexport async function removeData(collectionName, docId) {\r\n  try {\r\n    return await deleteDoc(doc(db, collectionName, docId));\r\n  } catch (e) {\r\n    console.error('Error adding document: ', e);\r\n  }\r\n}\r\n\r\nexport async function saveDataWithoutDocId(collectionName, jsonObject) {\r\n  try {\r\n    return await addDoc(collection(db, collectionName), jsonObject);\r\n  } catch (e) {\r\n    console.error('Error adding document: ', e);\r\n  }\r\n}\r\n\r\nexport async function getData(collectionName, docId) {\r\n  try {\r\n    return await getDoc(doc(db, collectionName, docId));\r\n  } catch (e) {\r\n    console.error('Error adding document: ', e);\r\n  }\r\n}\r\n\r\nexport async function getDataWithoutDocId(collectionName, condition) {\r\n  console.log(\"THis is the condition\", condition)\r\n  try {\r\n    let q = null;\r\n    if (condition) {\r\n      q = query(collection(db, collectionName), condition);\r\n    } else {\r\n      q = query(collection(db, collectionName));\r\n    }\r\n\r\n    return await getDocs(q);\r\n  } catch (e) {\r\n    console.error('Error adding document: ', e);\r\n  }\r\n}\r\n\r\nexport async function signInUsingGoogle() {\r\n  const auth = getAuth();\r\n  const provider = new GoogleAuthProvider();\r\n  signInWithPopup(auth, provider)\r\n    .then((result) => {\r\n      // This gives you a Google Access Token. You can use it to access the Google API.\r\n      const credential = GoogleAuthProvider.credentialFromResult(result);\r\n      const token = credential.accessToken;\r\n      console.log(\"THis is the token\", token)\r\n      // The signed-in user info.\r\n      const { user } = result;\r\n\r\n      if (result.user) {\r\n        getData('Users', result.user.uid).then((doc) => {\r\n          if (doc.data()) {\r\n            const user = doc.data();\r\n            console.log(\"This is the doc\",user)\r\n            const { email } = user;\r\n            localStorage.setItem('email', email);\r\n            localStorage.setItem('userName', user.userName);\r\n            localStorage.setItem('uid', result.user.uid);\r\n            localStorage.setItem('subscribed', result.user.subscribed);\r\n            window.location.href=\"/\"\r\n          } else {\r\n            saveData('Users', result.user.uid, {\r\n              id: result.user.uid,\r\n              email: result.user.email,\r\n              userName: result.user.displayName,\r\n            }).then(() => {\r\n              const { email } = result.user;\r\n              localStorage.setItem('email', email);\r\n              localStorage.setItem('uid', result.user.uid);\r\n              localStorage.setItem('userName', result.user.displayName);\r\n              window.location.href=\"/\"\r\n            });\r\n          }\r\n        });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      // Handle Errors here.\r\n      console.log(\"THis is the error\", error)\r\n      const errorCode = error.code;\r\n      const errorMessage = error.message;\r\n      // The email of the user's account used.\r\n      const { email } = error.customData;\r\n      // The AuthCredential type that was used.\r\n      const credential = GoogleAuthProvider.credentialFromError(error);\r\n      // ...\r\n    });\r\n};\r\n","import React, { useEffect } from 'react'\r\nimport { saveData } from '../../functions/functions'\r\n\r\nexport default function Subscribe() {\r\n    useEffect(() => {\r\n        if(localStorage.getItem(\"subscription\"))\r\n        {\r\n            saveData('Users', localStorage.getItem('uid'), {\r\n                \"subscriptionDate\":new Date(),\r\n                'subscribed':true\r\n              }).then(() => {\r\n                localStorage.setItem(\"subscribed\",true)\r\n                window.location.href = \"/\";\r\n              });\r\n        }\r\n    }, [])\r\n  return (\r\n    <div></div>\r\n  )\r\n}\r\n"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","auth","getStorage","getAnalytics","getAuth","sendPasswordReset","email","sendPasswordResetEmail","then","console","log","catch","error","saveData","collectionName","docId","jsonObject","setDoc","doc","merge","saveDataWithoutDocId","addDoc","collection","getData","getDoc","getDataWithoutDocId","condition","q","query","getDocs","signInUsingGoogle","provider","GoogleAuthProvider","signInWithPopup","result","token","accessToken","user","uid","data","localStorage","setItem","userName","subscribed","window","location","href","id","displayName","code","message","customData","Subscribe","useEffect","getItem","Date"],"sourceRoot":""}