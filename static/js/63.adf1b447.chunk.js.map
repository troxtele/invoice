{"version":3,"file":"static/js/63.adf1b447.chunk.js","mappings":"+WA2DMA,GAAMC,EAAAA,EAAAA,IAbW,CAGrBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKXC,GAAKC,EAAAA,EAAAA,IAAaV,GAGlBW,IAFUC,EAAAA,EAAAA,IAAWZ,IACTa,EAAAA,EAAAA,IAAab,IAClBc,EAAAA,EAAAA,IAAQd,IAGfe,EAAoB,SAACC,IACzBC,EAAAA,EAAAA,IAAuBN,EAAMK,GAC1BE,MAAK,WACJC,QAAQC,IAAI,0CAEb,IACAC,OAAM,SAACC,GACNH,QAAQG,MAAM,sCAAuCA,EAEtD,GACJ,C,4IC+CD,UAvHuB,WACrB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOP,EAAP,KAAcQ,EAAd,KACA,GAA4CD,EAAAA,EAAAA,UAAS,IAArD,eAAOE,EAAP,KAAuBC,EAAvB,KACA,GAAwCH,EAAAA,EAAAA,UAAS,IAAjD,eAAOI,EAAP,KAAqBC,EAArB,KAMMC,EAAY,yCAAG,WAAOC,GAAP,6EACnBA,EAAMC,iBADa,mBAIXhB,EAAAA,EAAAA,IAAkBC,GAJP,OAKjBU,EACE,4EANe,gDASjBE,EAAgB,wDATC,yDAAH,sDAalB,OAIE,SAAC,IAAD,CACEI,SAAS,KACTC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,SAPZ,UAUE,UAAC,IAAD,CACEC,GAAI,CACFC,OAAQ,YACRC,YAAa,WACbC,QAAS,OACTC,aAAc,OALlB,WAQE,SAAC,IAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASC,cAAY,EAApD,UACE,+CAEF,kBAAMC,SAAUlB,EAAhB,WACE,SAAC,IAAD,CACEmB,WAAS,EACTC,KAAK,QACLC,MAAM,QACNC,MAAOnC,EACPoC,SAhDgB,SAACtB,GACzBN,EAASM,EAAMuB,OAAOF,MACvB,EA+CSG,OAAO,YAET,SAAC,IAAD,CAAQL,KAAK,SAASL,QAAQ,YAAYW,MAAM,UAAhD,+BAID9B,IACC,SAAC,IAAD,CAAYmB,QAAQ,QAAQC,MAAM,SAAlC,SACGpB,IAGJE,IACC,SAAC,IAAD,CAAYiB,QAAQ,QAAQW,MAAM,QAAQV,MAAM,SAAhD,SACGlB,QAkBT,C","sources":["functions/firebase.js","views/PasswordReset/ForgotPassword.js"],"sourcesContent":["/*import { getAuth, signInWithPopup, GoogleAuthProvider , signInWithEmailAndPassword,createUserWithEmailAndPassword} from 'firebase/auth';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getAnalytics ,logEvent} from \"firebase/analytics\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n\r\n  apiKey: \"AIzaSyA1n1y2n-tshbTus7dE5GDKk2EIo4oBtNg\",\r\n\r\n  authDomain: \"invoicegeneator.firebaseapp.com\",\r\n\r\n  projectId: \"invoicegeneator\",\r\n\r\n  storageBucket: \"invoicegeneator.appspot.com\",\r\n\r\n  messagingSenderId: \"340327402365\",\r\n\r\n  appId: \"1:340327402365:web:6af1f7b629cdca10971a14\",\r\n\r\n  measurementId: \"G-6VK0L3PNQD\"\r\n\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst storage = getStorage(app);\r\nconst analytics = getAnalytics(app);\r\nexport { getAuth, signInWithPopup, GoogleAuthProvider, db , storage, signInWithEmailAndPassword,analytics,logEvent,createUserWithEmailAndPassword};\r\n*/\r\n// Import the necessary modules\r\nimport { signInWithPopup, GoogleAuthProvider , signInWithEmailAndPassword,createUserWithEmailAndPassword} from 'firebase/auth';\r\nimport { getAuth, sendPasswordResetEmail } from 'firebase/auth';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { getAnalytics, logEvent } from 'firebase/analytics';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n\r\n  \r\n  apiKey: \"AIzaSyA1n1y2n-tshbTus7dE5GDKk2EIo4oBtNg\",\r\n  authDomain: \"invoicegeneator.firebaseapp.com\",\r\n  projectId: \"invoicegeneator\",\r\n  storageBucket: \"invoicegeneator.appspot.com\",\r\n  messagingSenderId: \"340327402365\",\r\n  appId: \"1:340327402365:web:6af1f7b629cdca10971a14\",\r\n  measurementId: \"G-6VK0L3PNQD\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst storage = getStorage(app);\r\nconst analytics = getAnalytics(app);\r\nconst auth = getAuth(app); // Add this line to get the auth instance\r\n\r\n// Function to send a password reset email\r\nconst sendPasswordReset = (email) => {\r\n  sendPasswordResetEmail(auth, email)\r\n    .then(() => {\r\n      console.log(\"Password reset email sent successfully!\");\r\n      // Handle success (e.g., display a success message to the user)\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error sending password reset email:\", error);\r\n      // Handle error (e.g., display an error message to the user)\r\n    });\r\n};\r\n\r\nexport {\r\n  getAuth,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  db,\r\n  storage,\r\n  signInWithEmailAndPassword,\r\n  analytics,\r\n  logEvent,\r\n  createUserWithEmailAndPassword,\r\n  sendPasswordReset // Export the function for use in your Forgot Password page\r\n};","import React, { useState } from 'react';\nimport { sendPasswordReset } from '../../functions/firebase';\nimport { Container, Typography, TextField, Button, Box } from '@mui/material';\n\nconst ForgotPassword = () => {\n  const [email, setEmail] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n  \n    try {\n      await sendPasswordReset(email);\n      setSuccessMessage(\n        \"An email has been sent to your address with password reset instructions.\"\n      );\n    } catch (error) {\n      setErrorMessage('Failed to initiate password reset. Please try again.');\n    }\n  };\n\n  return (\n\n\n\n    <Container\n      maxWidth=\"sm\"\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <Box\n        sx={{\n          border: '1px solid',\n          borderColor: 'grey.300',\n          padding: '20px',\n          borderRadius: '8px',\n        }}\n      >\n        <Typography variant=\"h2\" align=\"center\" gutterBottom>\n          <h2>Forgot Password</h2>\n        </Typography>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            fullWidth\n            type=\"email\"\n            label=\"Email\"\n            value={email}\n            onChange={handleEmailChange}\n            margin=\"normal\"\n          />\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Reset Password\n          </Button>\n        </form>\n        {successMessage && (\n          <Typography variant=\"body1\" align=\"center\">\n            {successMessage}\n          </Typography>\n        )}\n        {errorMessage && (\n          <Typography variant=\"body1\" color=\"error\" align=\"center\">\n            {errorMessage}\n          </Typography>\n        )}\n      </Box>\n    </Container>\n\n   /* <div>\n      <h2>Forgot Password</h2>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Email:\n          <input type=\"email\" value={email} onChange={handleEmailChange} />\n        </label>\n        <button type=\"submit\">Reset Password</button>\n      </form>\n      {successMessage && <p>{successMessage}</p>}\n      {errorMessage && <p>{errorMessage}</p>}\n    </div>*/\n  )}\n\n  /*\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    sendPasswordReset(email) // Use the sendPasswordReset function from firebaseConfig\n      .then(() => {\n        setSuccessMessage(\n          \"An email has been sent to your address with password reset instructions.\"\n        );\n      })\n      .catch((error) => {\n        setErrorMessage('Failed to initiate password reset. Please try again.');\n      });\n  };\n\n  return (\n    <div>\n      <h2>Forgot Password</h2>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Email:\n          <input type=\"email\" value={email} onChange={handleEmailChange} />\n        </label>\n        <button type=\"submit\">Reset Password</button>\n      </form>\n      {successMessage && <p>{successMessage}</p>}\n      {errorMessage && <p>{errorMessage}</p>}\n    </div>\n  );\n  */\n\n\nexport default ForgotPassword;"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","auth","getStorage","getAnalytics","getAuth","sendPasswordReset","email","sendPasswordResetEmail","then","console","log","catch","error","useState","setEmail","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","maxWidth","style","display","flexDirection","alignItems","justifyContent","height","sx","border","borderColor","padding","borderRadius","variant","align","gutterBottom","onSubmit","fullWidth","type","label","value","onChange","target","margin","color"],"sourceRoot":""}